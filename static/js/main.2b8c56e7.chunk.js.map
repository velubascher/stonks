{"version":3,"sources":["components/StockTable.js","components/ExchangesTable.js","App.js","serviceWorker.js","index.js"],"names":["StockTable","props","stock","buy","sell","update","Table","aria-label","TableBody","TableRow","key","TableCell","component","scope","align","ticker","filter","reduce","a","b","volume","totalTradeVolume","data","values","map","value","Math","max","getMax","min","getMin","length","last","penultimate","toFixed","percentVariation","tradeVolume","tickers","trade","totalBuy","i","getTickers","exchange","exchanges","stocks","companies","listed_companies","includes","company_name","ExchangesTable","exchangeStocks","buyVolume","sellVolume","total","Object","keys","forEach","current_exchange","console","log","marketShare","App","connectSockets","socket","on","setState","prevState","emit","chart","React","createRef","state","isConnected","selectedStock","selectedExchange","handleConnectClick","bind","handleDisconnectClick","createChart","this","current","width","height","lineSeries","addLineSeries","currentStock","currentStockData","setData","io","path","close","className","Container","maxWidth","Grid","container","direction","alignContent","spacing","item","Button","variant","color","onClick","justify","Paper","Autocomplete","id","options","getOptionLabel","option","style","renderInput","params","TextField","label","onChange","event","newValue","ref","TableContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b8c56e7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table, TableCell, TableRow, TableBody } from '@material-ui/core'\r\n\r\n\r\nfunction totalTradeVolume(ticker, buy, sell){\r\n  let totalBuy = buy.filter((stock) => stock.ticker === ticker).reduce((a, b) => a + b.volume, 0)\r\n  let totalSell = sell.filter((stock) => stock.ticker === ticker).reduce((a, b) => a + b.volume, 0)\r\n  return totalBuy + totalSell;\r\n}\r\n\r\nfunction getMax(data){\r\n  let values = data.map((update) => update.value);\r\n  return Math.max(...values);\r\n}\r\n\r\nfunction getMin(data){\r\n  let values = data.map((update) => update.value);\r\n  return Math.min(...values);\r\n}\r\n\r\nfunction percentVariation(data){\r\n  let last = data[data.length - 1].value;\r\n  let penultimate = data[data.length - 2].value;\r\n  let result = (last - penultimate)/penultimate * 100;\r\n  return result.toFixed(4);\r\n}\r\n\r\nfunction StockTable(props){\r\n  const { stock, buy, sell, update } = props;\r\n  return (\r\n    <Table aria-label=\"simple table\">\r\n      <TableBody>\r\n        <TableRow key='volumen total transado'>\r\n          <TableCell component=\"th\" scope=\"row\">\r\n            Volumen Total Transado\r\n          </TableCell>\r\n          <TableCell align=\"right\">{stock? totalTradeVolume(stock.ticker, buy, sell): 0}</TableCell>\r\n        </TableRow>\r\n        <TableRow key='alto historico'>\r\n          <TableCell component=\"th\" scope=\"row\">\r\n            Alto Hist√≥rico\r\n          </TableCell>\r\n          <TableCell align=\"right\">{update ? getMax(update) : 0}</TableCell>\r\n        </TableRow>\r\n        <TableRow key='bajo historico'>\r\n          <TableCell component=\"th\" scope=\"row\">\r\n            Bajo Hist√≥rico\r\n          </TableCell>\r\n          <TableCell align=\"right\">{update ? getMin(update) : 0}</TableCell>\r\n        </TableRow>\r\n        <TableRow key='ultimo precio'>\r\n          <TableCell component=\"th\" scope=\"row\">\r\n            √öltimo precio\r\n          </TableCell>\r\n          <TableCell align=\"right\">{update ? update[update.length - 1].value : 0}</TableCell>\r\n        </TableRow>\r\n        <TableRow key='variacion porcentual'>\r\n          <TableCell component=\"th\" scope=\"row\">\r\n            Variaci√≥n Porcentual\r\n          </TableCell>\r\n          <TableCell align=\"right\">{update && update.length > 1 ? percentVariation(update): 0}%</TableCell>\r\n        </TableRow>\r\n      </TableBody>\r\n    </Table>\r\n    )\r\n}\r\n\r\nexport default StockTable;\r\n","import React from 'react';\r\nimport { Table, TableCell, TableRow } from '@material-ui/core'\r\n\r\n\r\nfunction tradeVolume(tickers, trade){\r\n  let totalBuy = 0;\r\n  for(let i = 0; i < tickers.length; i++){\r\n    totalBuy += trade.filter((stock) => stock.ticker === tickers[i]).reduce((a, b) => a + b.volume, 0)  \r\n  }\r\n  return totalBuy;\r\n}\r\n\r\nfunction getTickers(exchange, exchanges, stocks){\r\n  const companies = exchanges[exchange].listed_companies\r\n  const tickers = stocks.map((stock) => {\r\n    if (companies.includes(stock.company_name)) return stock.ticker;\r\n    return null;\r\n  })\r\n  return tickers.filter(ticker => ticker);\r\n}\r\n\r\nfunction marketShare(exchange, exchanges, stocks, buy, sell, volume){\r\n  let total = 0;\r\n  let tickers = [];\r\n  let exchanges_list = Object.keys(exchanges);\r\n\r\n  exchanges_list.forEach((current_exchange) => {\r\n    if (current_exchange !== exchange) {\r\n      tickers = getTickers(current_exchange, exchanges, stocks);\r\n      total += tradeVolume(tickers, buy) + tradeVolume(tickers, sell);\r\n      }\r\n  })\r\n  console.log('volume', volume)\r\n  console.log('total', total)\r\n  let market_share = volume/(volume + total) * 100;\r\n  return market_share.toFixed(4);\r\n}\r\n\r\nfunction ExchangesTable(props){\r\n  const { exchange, exchanges, stocks, buy, sell } = props;\r\n  let exchangeStocks;\r\n  if (exchange && exchanges && stocks){\r\n    exchangeStocks = getTickers(exchange, exchanges, stocks);\r\n  }\r\n\r\n  const buyVolume = (exchangeStocks && tradeVolume(exchangeStocks, buy)) || 0;\r\n  const sellVolume = (exchangeStocks && tradeVolume(exchangeStocks, sell)) || 0;\r\n\r\n  return (\r\n    <Table aria-label=\"simple table\">\r\n      <TableRow key='volumen compra'>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          Volumen Compra\r\n        </TableCell>\r\n        <TableCell align=\"right\">{buyVolume}</TableCell>\r\n      </TableRow>\r\n      <TableRow key='volumen venta'>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          Volumen Venta\r\n        </TableCell>\r\n        <TableCell align=\"right\">{sellVolume}</TableCell>\r\n      </TableRow>\r\n      <TableRow key='volumen total'>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          Volumen Total\r\n        </TableCell>\r\n        <TableCell align=\"right\">{sellVolume + buyVolume}</TableCell>\r\n      </TableRow>\r\n      <TableRow key='cantidad acciones'>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          Cantidad de Acciones\r\n        </TableCell>\r\n        <TableCell align=\"right\">{(exchangeStocks && exchangeStocks.length) || 0}</TableCell>\r\n      </TableRow>\r\n      <TableRow key='participacion de mercado'>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          Participaci√≥n de Mercado\r\n        </TableCell>\r\n        <TableCell align=\"right\">{(exchangeStocks && marketShare(exchange, exchanges, stocks, buy, sell, sellVolume + buyVolume)) || 0}%</TableCell>\r\n      </TableRow>\r\n    </Table>\r\n  )\r\n}\r\n  \r\nexport default ExchangesTable;\r\n  ","import React from 'react';\r\nimport './App.css';\r\nimport io from 'socket.io-client'\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { Container, Button, TextField, Paper, Grid, TableContainer } from '@material-ui/core'\r\nimport StockTable from './components/StockTable'\r\nimport ExchangesTable from './components/ExchangesTable'\r\nimport { createChart } from 'lightweight-charts';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.chart = React.createRef()\r\n    this.state = {\r\n      isConnected: false,\r\n      update: [],\r\n      buy: [],\r\n      sell: [],\r\n      exchanges: [],\r\n      stocks: [],\r\n      selectedStock: null,\r\n      selectedExchange: null,\r\n    };\r\n    \r\n    this.handleConnectClick = this.handleConnectClick.bind(this);\r\n    this.handleDisconnectClick = this.handleDisconnectClick.bind(this);\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    // cosas\r\n  }\r\n  \r\n  componentDidMount() {\r\n    const chart = createChart(this.chart.current, { width: 500, height: 400 });\r\n    this.lineSeries = chart.addLineSeries(); \r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let { update, selectedStock } = this.state;\r\n    if (selectedStock) {\r\n      let currentStock = update.filter((stock) => stock.ticker === selectedStock.ticker);\r\n      this.currentStockData = currentStock;\r\n      this.lineSeries.setData(this.currentStockData);\r\n    }\r\n  }\r\n  \r\n  handleConnectClick() {\r\n    this.socket = io('wss://le-18262636.bitzonte.com', {\r\n      path: '/stocks'\r\n    });\r\n    this.connectSockets();\r\n    this.setState({isConnected: true});\r\n  }\r\n  \r\n  handleDisconnectClick() {\r\n    this.setState({isConnected: false});\r\n    this.socket.close()\r\n  }\r\n  \r\n  connectSockets = () => {\r\n    this.socket.on('UPDATE', data => this.setState((prevState) => ({ update: [...prevState.update, data] })))\r\n    this.socket.on('BUY', data => this.setState((prevState) => ({ buy: [...prevState.buy, data] })))\r\n    this.socket.on('SELL', data => this.setState((prevState) => ({ sell: [...prevState.sell, data] })))\r\n    \r\n    // Mandar eventos al servidor\r\n    this.socket.emit('STOCKS')\r\n    this.socket.emit('EXCHANGES')\r\n    this.socket.on('EXCHANGES', data => this.setState({ exchanges: data }))\r\n    this.socket.on('STOCKS', data => this.setState({ stocks: data }))\r\n  }\r\n\r\n  render() {\r\n    \r\n    const { isConnected } = this.state;\r\n\r\n    return (\r\n      <div className='App'>\r\n      <h2>Presionar \"Conectar\" para ver la informaci√≥n</h2>\r\n        <Container maxWidth='lg'>\r\n          <Grid container direction='column' alignContent='flex-start' spacing={1}>\r\n            <Grid item>\r\n            {!isConnected ?\r\n              <Button variant=\"contained\" color='primary' onClick={this.handleConnectClick}>\r\n                Conectar\r\n              </Button>\r\n              :\r\n              <Button variant=\"contained\" color='secondary' onClick={this.handleDisconnectClick}>\r\n                Desconectar\r\n              </Button>\r\n            }\r\n            </Grid>\r\n            <Grid item></Grid>\r\n          </Grid>\r\n          <Grid container spacing={2} justify='space-between'>\r\n            <Grid item>\r\n              <Paper className='paper' spacing={2}>\r\n                <h3>B√∫squeda de Stocks</h3>\r\n                <Grid container direction='column' spacing={5} alignContent=\"center\">\r\n                  <Grid item>\r\n                    <Autocomplete\r\n                      id=\"stock-selector\"\r\n                      options={this.state.stocks}\r\n                      getOptionLabel={(option) => option.ticker}\r\n                      style={{ width: 300 }}\r\n                      renderInput={(params) => <TextField {...params} label=\"Stocks\" variant=\"outlined\" />}\r\n                      onChange={(event, newValue) => {\r\n                        this.setState({selectedStock: newValue});\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid container justify='center'>\r\n                    <Grid item>\r\n                      <div ref={this.chart} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <TableContainer component={Paper} variant='outlined'>\r\n                        {this.state.selectedStock && this.state.selectedStock.ticker}\r\n                        <StockTable\r\n                          update={this.currentStockData}\r\n                          buy={this.state.buy}\r\n                          sell={this.state.sell}\r\n                          stock={this.state.selectedStock}\r\n                        />    \r\n                      </TableContainer>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n\r\n            </Grid>\r\n            <Grid item>\r\n              <Paper className='paper'>\r\n                <h3>B√∫squeda de Exchanges</h3>\r\n                <Autocomplete\r\n                  id=\"exchanges-selector\"\r\n                  options={Object.keys(this.state.exchanges)}\r\n                  style={{ width: 300 }}\r\n                  renderInput={(params) => <TextField {...params} label=\"Exchanges\" variant=\"outlined\" />}\r\n                  onChange={(event, newValue) => {\r\n                    this.setState({selectedExchange: newValue});\r\n                  }}\r\n                />\r\n                <ExchangesTable\r\n                  update={this.currentStockData}\r\n                  buy={this.state.buy}\r\n                  sell={this.state.sell}\r\n                  exchange={this.state.selectedExchange}\r\n                  exchanges={this.state.exchanges}\r\n                  stocks={this.state.stocks}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n          \r\n          <Grid container>\r\n          </Grid>\r\n        </Container>\r\n\r\n      </div>\r\n    );\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}